Estrutura de Classes
Model
Contém as classes que representam os dados da aplicação e a definição da entidade do banco de dados.

Project.kt

@Entity(tableName = "projects")
data class Project(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val name: String,
    val description: String,
    val category: String,
    val startDate: String
)


DAO e Database
Responsáveis pela interação com o banco de dados.

ProjectDao.kt

@Dao
interface ProjectDao {
    @Query("SELECT * FROM projects")
    fun getAllProjects(): Flow<List<Project>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertProject(project: Project)

    @Delete
    suspend fun deleteProject(project: Project)
}


AppDatabase.kt

@Database(entities = [Project::class], version = 1)
abstract class AppDatabase : RoomDatabase() {
    abstract fun projectDao(): ProjectDao
}


ViewModel
Gerencia os dados da interface e lida com a lógica de negócios.

ProjectViewModel.kt

class ProjectViewModel(application: Application) : AndroidViewModel(application) {
    private val projectDao = Room.databaseBuilder(
        application, AppDatabase::class.java, "project_db"
    ).build().projectDao()

    val projects = projectDao.getAllProjects()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    fun addProject(project: Project) {
        viewModelScope.launch {
            projectDao.insertProject(project)
        }
    }
}


UI (Compose)
Definição das telas utilizando Jetpack Compose.

ProjectListScreen.kt


@Composable
fun ProjectListScreen(viewModel: ProjectViewModel, onNavigateToAdd: () -> Unit) {
    val projects by viewModel.projects.collectAsState(initial = emptyList())

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text("Projetos Sustentáveis", style = MaterialTheme.typography.h4)
        LazyColumn {
            items(projects) { project ->
                ProjectItem(project)
            }
        }
        FloatingActionButton(onClick = { onNavigateToAdd() }) {
            Icon(Icons.Default.Add, contentDescription = "Adicionar Projeto")
        }
    }
}

@Composable
fun ProjectItem(project: Project) {
    Column(modifier = Modifier.padding(8.dp)) {
        Text(project.name, style = MaterialTheme.typography.h6)
        Text(project.category, style = MaterialTheme.typography.body2)
    }
}


AddProjectScreen.kt

@Composable
fun AddProjectScreen(viewModel: ProjectViewModel, onBack: () -> Unit) {
    var name by remember { mutableStateOf("") }
    var description by remember { mutableStateOf("") }
    var category by remember { mutableStateOf("") }
    var startDate by remember { mutableStateOf("") }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        OutlinedTextField(value = name, onValueChange = { name = it }, label = { Text("Nome") })
        OutlinedTextField(value = description, onValueChange = { description = it }, label = { Text("Descrição") })
        OutlinedTextField(value = category, onValueChange = { category = it }, label = { Text("Categoria") })
        OutlinedTextField(value = startDate, onValueChange = { startDate = it }, label = { Text("Data de Início") })

        Button(onClick = {
            viewModel.addProject(Project(name = name, description = description, category = category, startDate = startDate))
            onBack()
        }) {
            Text("Salvar")
        }
    }
}

Navegação
Adicione a lógica de navegação com o Navigation Compose:

Dependência:
implementation "androidx.navigation:navigation-compose:2.7.3"


Configuração:
MainActivity.kt

@Composable
fun AppNavigation() {
    val navController = rememberNavController()

    NavHost(navController = navController, startDestination = "list") {
        composable("list") {
            ProjectListScreen(
                viewModel = hiltViewModel(),
                onNavigateToAdd = { navController.navigate("add") }
            )
        }
        composable("add") {
            AddProjectScreen(
                viewModel = hiltViewModel(),
                onBack = { navController.popBackStack() }
            )
        }
    }
}