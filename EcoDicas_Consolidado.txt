
# EcoDicas - Código consolidado

### 1. Modelo (Dica.kt)
import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "dicas")
data class Dica(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val titulo: String,
    val descricao: String
)

### 2. DAO (DicaDao.kt)
import androidx.room.*
import kotlinx.coroutines.flow.Flow

@Dao
interface DicaDao {
    @Query("SELECT * FROM dicas")
    fun getAllDicas(): Flow<List<Dica>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertDica(dica: Dica)

    @Delete
    suspend fun deleteDica(dica: Dica)
}

### 3. Banco de Dados (AppDatabase.kt)
import androidx.room.Database
import androidx.room.RoomDatabase

@Database(entities = [Dica::class], version = 1)
abstract class AppDatabase : RoomDatabase() {
    abstract fun dicaDao(): DicaDao
}

### 4. ViewModel (DicaViewModel.kt)
import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import androidx.room.Room
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

class DicaViewModel(application: Application) : AndroidViewModel(application) {
    private val dicaDao = Room.databaseBuilder(
        application, AppDatabase::class.java, "dica_db"
    ).build().dicaDao()

    val dicas = dicaDao.getAllDicas()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    fun addDica(dica: Dica) {
        viewModelScope.launch {
            dicaDao.insertDica(dica)
        }
    }
}

### 5. EcoDicasListScreen (EcoDicasListScreen.kt)
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.livedata.observeAsState

@Composable
fun EcoDicasListScreen(viewModel: DicaViewModel, onNavigateToAdd: () -> Unit) {
    val dicas by viewModel.dicas.collectAsState(initial = emptyList())
    var searchQuery by remember { mutableStateOf("") }
    val filteredDicas = dicas.filter {
        it.titulo.contains(searchQuery, ignoreCase = true) || 
        it.descricao.contains(searchQuery, ignoreCase = true)
    }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text("EcoDicas", style = MaterialTheme.typography.h4)

        OutlinedTextField(
            value = searchQuery,
            onValueChange = { searchQuery = it },
            label = { Text("Pesquisar") },
            modifier = Modifier.fillMaxWidth()
        )

        LazyColumn {
            items(filteredDicas) { dica ->
                EcoDicaItem(dica)
            }
        }

        FloatingActionButton(onClick = { onNavigateToAdd() }) {
            Icon(Icons.Default.Add, contentDescription = "Adicionar Dica")
        }
    }
}

@Composable
fun EcoDicaItem(dica: Dica) {
    Column(modifier = Modifier.padding(8.dp)) {
        Text(dica.titulo, style = MaterialTheme.typography.h6)
        Text(dica.descricao, style = MaterialTheme.typography.body2)
    }
}

### 6. AddEcoDicaScreen (AddEcoDicaScreen.kt)
@Composable
fun AddEcoDicaScreen(viewModel: DicaViewModel, onBack: () -> Unit) {
    var titulo by remember { mutableStateOf("") }
    var descricao by remember { mutableStateOf("") }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        OutlinedTextField(value = titulo, onValueChange = { titulo = it }, label = { Text("Título") })
        OutlinedTextField(value = descricao, onValueChange = { descricao = it }, label = { Text("Descrição") })

        Button(onClick = {
            viewModel.addDica(Dica(titulo = titulo, descricao = descricao))
            onBack()
        }) {
            Text("Salvar")
        }
    }
}

### 7. Tela de Identificação (IdentificationScreen.kt)
@Composable
fun IdentificationScreen(onBack: () -> Unit) {
    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center
    ) {
        Text("Integrantes do Projeto", style = MaterialTheme.typography.h4)

        Spacer(modifier = Modifier.height(16.dp))

        Text("Henrique – RMxxxxx", style = MaterialTheme.typography.body1)
        Text("Outro Integrante – RMxxxxx", style = MaterialTheme.typography.body1)

        Spacer(modifier = Modifier.height(24.dp))

        Button(onClick = onBack) {
            Text("Voltar")
        }
    }
}

### 8. Navegação (AppNavigation.kt)
import androidx.compose.runtime.Composable
import androidx.navigation.compose.*
import androidx.hilt.navigation.compose.hiltViewModel

@Composable
fun AppNavigation() {
    val navController = rememberNavController()

    NavHost(navController = navController, startDestination = "list") {
        composable("list") {
            EcoDicasListScreen(
                viewModel = hiltViewModel(),
                onNavigateToAdd = { navController.navigate("add") }
            )
        }
        composable("add") {
            AddEcoDicaScreen(
                viewModel = hiltViewModel(),
                onBack = { navController.popBackStack() }
            )
        }
        composable("identification") {
            IdentificationScreen(onBack = { navController.popBackStack() })
        }
    }
}

### 9. MainActivity (MainActivity.kt)
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AppNavigation()
        }
    }
}
